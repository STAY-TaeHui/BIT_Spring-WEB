<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd">
<!-- config 태그는 어노테이션과 관련해서 
다음의 BeanPostProcessor를 함께 등록 한다.
- @Required(RequiedAnnotationBeanPostProcessor)
- @Autowired(AutowiredAnnotationBeanPostProcessor)
- @Resource, @PostConstruct, @PreDestory(CommonAnnotationBeanPostProcessor)
- @Configuration(ConfigurationClassPostProcessor)
자동 빈객체 생성 : <context:component-scan>
<context:component-scan base-package="com.controller"
공통빈
@Controller
Presentation Layer에서 Contoller를 명시하기 위해서 사용
@Service
Business Layer에서 Service를 명시하기 위해서 사용
@Repository 
Persistence Layer에서 DAO를 명시하기 위해서 사용
@Component
그 외에 자동으로 스캔해서 등록하고 싶은 것들을 위해 사용
 -->
​

<!-- @Autowired 자동 처리를 빈객체 자동 생성 등록 -->

<context:annotation-config />
	
	
<!-- 공통빈 -->
	<bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
<!-- TEST_1 -->
	<bean id="helloController" class="com.controller.HelloController"></bean>
	

<!-- TEST_2 -->
<!-- 
	하나의 요청주소로 두가지를 뽑을수 있다. : GET, POST
	화면, 서비스 처리 판단
	전제조건 : 요청주소는 같다.
 -->
 <bean id="newArticleController" class="com.controller.NewArticleController"></bean>
</beans> 




